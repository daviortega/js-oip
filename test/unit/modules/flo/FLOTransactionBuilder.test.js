import { ECPair } from 'bitcoinjs-lib'

import FLOTransaction, { FLODATA_MAX_LEN } from '../../../../src/modules/flo/FLOTransaction'
import FLOTransactionBuilder from '../../../../src/modules/flo/FLOTransactionBuilder'
import { network } from '../../../../src/config/networks/flo/testnet'

const SAT_PER_FLO = 100000000

// Test addresses, please don't spend any of these coins!
let publicAddress = 'oZdUBH31q6Zesnx6mSW57nNCo8XzJ2b3cd'
let wif = 'cP3LMhqT32oBKJcf8hBRDUAZopQtcajX4ZF2bVoxzakNkmnj6Wb1'

// Sample Data
let sampleInput = {
  txid: 'd95b264f29d09bdeae76a995921579d74597d83228795637db16fcea21653375',
  vout: 1
}

describe('Build Transaction', () => {
  describe('SIGHASH_ALL', () => {
    test('No floData', () => {
      let txb = new FLOTransactionBuilder(network)

      // Add our single input
      txb.addInput(sampleInput.txid, sampleInput.vout)
      // Add our output
      txb.addOutput(publicAddress, parseInt(0.99 * SAT_PER_FLO))
      // Add our floData
      // txb.setFloData("Abc")

      // Sign our transaction using the local `flosigner` at `src/config/networks/flo/flosigner.js`
      txb.sign(0, ECPair.fromWIF(wif, network), undefined, FLOTransaction.SIGHASH_ALL)

      // Build the hex
      let builtHex
      try {
        builtHex = txb.build().toHex()
      } catch (err) {
        throw new Error(`Unable to build Transaction Hex!: ${err}`)
      }

      expect(builtHex).toBe('020000000175336521eafc16db3756792832d89745d779159295a976aede9bd0294f265bd9010000006a473044022017d4538ea182cc3a8fae0420382fbdb3f9bd9e1c7769e74e1b0d152ee9e52caa02207018898584590e4d83b844123ed4d944555a46ca33c00025416fe76db8f03ee601210235dbc5de310bde64bf53276d93f5347d55bd5b1f64c4885039b5bfd8afe2dfa7ffffffff01c09ee605000000001976a914b7d946f6088b9d05b5249e8503f9d202bfffc01588ac0000000000')
    })
    test('Partial floData', () => {
      let txb = new FLOTransactionBuilder(network)

      // Add our single input
      txb.addInput(sampleInput.txid, sampleInput.vout)
      // Add our output
      txb.addOutput(publicAddress, parseInt(0.99 * SAT_PER_FLO))
      // Add our floData
      let floData = ''
      while (Buffer.from(floData).length < 540) {
        floData += 'a'
      }
      txb.setFloData(floData)

      // Sign our transaction using the local `flosigner` at `src/config/networks/flo/flosigner.js`
      txb.sign(0, ECPair.fromWIF(wif, network), undefined, FLOTransaction.SIGHASH_ALL)

      // Build the hex
      let builtHex
      try {
        builtHex = txb.build().toHex()
      } catch (err) {
        throw new Error(`Unable to build Transaction Hex!: ${err}`)
      }

      expect(builtHex).toBe('020000000175336521eafc16db3756792832d89745d779159295a976aede9bd0294f265bd9010000006b483045022100e14ea6214946de1b0098b919db955ed5b72a4b6ebee2633a7b274b33a178ece102201997f9ef66b2f941047f7d71913ecb0d95c399dcf9a896dcbbdfe17ec1344f6a01210235dbc5de310bde64bf53276d93f5347d55bd5b1f64c4885039b5bfd8afe2dfa7ffffffff01c09ee605000000001976a914b7d946f6088b9d05b5249e8503f9d202bfffc01588ac00000000fd1c
    })
    test('Full floData', () => {
      let txb = new FLOTransactionBuilder(network)

      // Add our single input
      txb.addInput(sampleInput.txid, sampleInput.vout)
      // Add our output
      txb.addOutput(publicAddress, parseInt(0.99 * SAT_PER_FLO))
      // Add our floData
      let floData = ''
      while (Buffer.from(floData).length < FLODATA_MAX_LEN) {
        floData += 'a'
      }
      txb.setFloData(floData)

      // Sign our transaction using the local `flosigner` at `src/config/networks/flo/flosigner.js`
      txb.sign(0, ECPair.fromWIF(wif, network), undefined, FLOTransaction.SIGHASH_ALL)

      // Build the hex
      let builtHex
      try {
        builtHex = txb.build().toHex()
      } catch (err) {
        throw new Error(`Unable to build Transaction Hex!: ${err}`)
      }

      expect(builtHex).toBe('020000000175336521eafc16db3756792832d89745d779159295a976aede9bd0294f265bd9010000006a473044022031a1ea4c05ef61bf1ace41689c72c8f4459a15a7d1b9878fe5b57eb99a2426f702202913a91f4d10031b7badc03129b18497c3545a179aa34af503c834ea3ce8729401210235dbc5de310bde64bf53276d93f5347d55bd5b1f64c4885039b5bfd8afe2dfa7ffffffff01c09ee605000000001976a914b7d946f6088b9d05b5249e8503f9d202bfffc01588ac00000000fd
    })
  })

  describe('SIGHASH_NONE', () => {
    test('No floData', () => {
      let txb = new FLOTransactionBuilder(network)

      // Add our single input
      txb.addInput(sampleInput.txid, sampleInput.vout)
      // Add our output
      txb.addOutput(publicAddress, parseInt(0.99 * SAT_PER_FLO))
      // Add our floData
      // txb.setFloData("Abc")

      // Sign our transaction using the local `flosigner` at `src/config/networks/flo/flosigner.js`
      txb.sign(0, ECPair.fromWIF(wif, network), undefined, FLOTransaction.SIGHASH_NONE)

      // Build the hex
      let builtHex
      try {
        builtHex = txb.build().toHex()
      } catch (err) {
        throw new Error(`Unable to build Transaction Hex!: ${err}`)
      }

      expect(builtHex).toBe('020000000175336521eafc16db3756792832d89745d779159295a976aede9bd0294f265bd9010000006b483045022100fba41fcb5617dea1c01e589bf75a0bed377e1f0f9d01f3e15c9d6c10fab0cf73022065386639fc4182195d534b5c2bfe45f57fc57efd8e69f701619026967a3a9bf402210235dbc5de310bde64bf53276d93f5347d55bd5b1f64c4885039b5bfd8afe2dfa7ffffffff01c09ee605000000001976a914b7d946f6088b9d05b5249e8503f9d202bfffc01588ac0000000000')
    })
    test('Partial floData', () => {
      let txb = new FLOTransactionBuilder(network)

      // Add our single input
      txb.addInput(sampleInput.txid, sampleInput.vout)
      // Add our output
      txb.addOutput(publicAddress, parseInt(0.99 * SAT_PER_FLO))
      // Add our floData
      let floData = ''
      while (Buffer.from(floData).length < 540) {
        floData += 'a'
      }
      txb.setFloData(floData)

      // Sign our transaction using the local `flosigner` at `src/config/networks/flo/flosigner.js`
      txb.sign(0, ECPair.fromWIF(wif, network), undefined, FLOTransaction.SIGHASH_NONE)

      // Build the hex
      let builtHex
      try {
        builtHex = txb.build().toHex()
      } catch (err) {
        throw new Error(`Unable to build Transaction Hex!: ${err}`)
      }

      expect(builtHex).toBe('020000000175336521eafc16db3756792832d89745d779159295a976aede9bd0294f265bd9010000006a473044022047b1f1747c5c2ec177aac8ef2c405ca9fe465e9dbefd65bdf3a651174bdaf40602204cdf4fa9db5ee505d871ee9f709ffbfabe9b746b7a1148f8473feb681c00cdb202210235dbc5de310bde64bf53276d93f5347d55bd5b1f64c4885039b5bfd8afe2dfa7ffffffff01c09ee605000000001976a914b7d946f6088b9d05b5249e8503f9d202bfffc01588ac00000000fd1c
    })
    test('Full floData', () => {
      let txb = new FLOTransactionBuilder(network)

      // Add our single input
      txb.addInput(sampleInput.txid, sampleInput.vout)
      // Add our output
      txb.addOutput(publicAddress, parseInt(0.99 * SAT_PER_FLO))
      // Add our floData
      let floData = ''
      while (Buffer.from(floData).length < FLODATA_MAX_LEN) {
        floData += 'a'
      }
      txb.setFloData(floData)

      // Sign our transaction using the local `flosigner` at `src/config/networks/flo/flosigner.js`
      txb.sign(0, ECPair.fromWIF(wif, network), undefined, FLOTransaction.SIGHASH_NONE)

      // Build the hex
      let builtHex
      try {
        builtHex = txb.build().toHex()
      } catch (err) {
        throw new Error(`Unable to build Transaction Hex!: ${err}`)
      }

      expect(builtHex).toBe('020000000175336521eafc16db3756792832d89745d779159295a976aede9bd0294f265bd9010000006b483045022100fda24d7af0e4402f9f6411aea84198fd943743c33814536586cf947078689aae02207b351309c2d1de06aea25b4ce6d9408cb9edaf01ac6807d1fea8cc808ea01bb102210235dbc5de310bde64bf53276d93f5347d55bd5b1f64c4885039b5bfd8afe2dfa7ffffffff01c09ee605000000001976a914b7d946f6088b9d05b5249e8503f9d202bfffc01588ac00000000fd
    })
  })

  describe('SIGHASH_ALL | SIGHASH_ANYONECANPAY', () => {
    let sighashType = FLOTransaction.SIGHASH_ALL
    sighashType |= FLOTransaction.SIGHASH_ANYONECANPAY

    expect((sighashType & 0x1f) === FLOTransaction.SIGHASH_NONE && (sighashType & 0x1f) === FLOTransaction.SIGHASH_SINGLE).toBe(false)
    expect(sighashType & FLOTransaction.SIGHASH_ANYONECANPAY).toBe(128)

    test('No floData', () => {
      let txb = new FLOTransactionBuilder(network)

      // Add our single input
      txb.addInput(sampleInput.txid, sampleInput.vout)
      // Add our output
      txb.addOutput(publicAddress, parseInt(0.99 * SAT_PER_FLO))
      // Add our floData
      // txb.setFloData("Abc")

      // Sign our transaction using the local `flosigner` at `src/config/networks/flo/flosigner.js`
      txb.sign(0, ECPair.fromWIF(wif, network), undefined, sighashType)

      // Build the hex
      let builtHex
      try {
        builtHex = txb.build().toHex()
      } catch (err) {
        throw new Error(`Unable to build Transaction Hex!: ${err}`)
      }

      expect(builtHex).toBe('020000000175336521eafc16db3756792832d89745d779159295a976aede9bd0294f265bd9010000006b483045022100cb48fcaee188ff471b4fe2f170ca2a1463e706a71a768057aee10ae450b5f6a2022005fbd99a7bca3449eacf72624bf20ee0d3ba76491eb59dc9ee885d5f4324642081210235dbc5de310bde64bf53276d93f5347d55bd5b1f64c4885039b5bfd8afe2dfa7ffffffff01c09ee605000000001976a914b7d946f6088b9d05b5249e8503f9d202bfffc01588ac0000000000')
    })
    test('Partial floData', () => {
      let txb = new FLOTransactionBuilder(network)

      // Add our single input
      txb.addInput(sampleInput.txid, sampleInput.vout)
      // Add our output
      txb.addOutput(publicAddress, parseInt(0.99 * SAT_PER_FLO))
      // Add our floData
      let floData = ''
      while (Buffer.from(floData).length < 540) {
        floData += 'a'
      }
      txb.setFloData(floData)

      // Sign our transaction using the local `flosigner` at `src/config/networks/flo/flosigner.js`
      txb.sign(0, ECPair.fromWIF(wif, network), undefined, sighashType)

      // Build the hex
      let builtHex
      try {
        builtHex = txb.build().toHex()
      } catch (err) {
        throw new Error(`Unable to build Transaction Hex!: ${err}`)
      }

      expect(builtHex).toBe('020000000175336521eafc16db3756792832d89745d779159295a976aede9bd0294f265bd9010000006a47304402204c05e28c06388dd5a47bcd5cb2f325061d6adfa5dfe578d4924cc91be717e88402202063e4be6b8e6e6c784d30b822440635dcb5db8235f0d62787adebc2237c659081210235dbc5de310bde64bf53276d93f5347d55bd5b1f64c4885039b5bfd8afe2dfa7ffffffff01c09ee605000000001976a914b7d946f6088b9d05b5249e8503f9d202bfffc01588ac00000000fd1c
    })
    test('Full floData', () => {
      let txb = new FLOTransactionBuilder(network)

      // Add our single input
      txb.addInput(sampleInput.txid, sampleInput.vout)
      // Add our output
      txb.addOutput(publicAddress, parseInt(0.99 * SAT_PER_FLO))
      // Add our floData
      let floData = ''
      while (Buffer.from(floData).length < FLODATA_MAX_LEN) {
        floData += 'a'
      }
      txb.setFloData(floData)

      // Sign our transaction using the local `flosigner` at `src/config/networks/flo/flosigner.js`
      txb.sign(0, ECPair.fromWIF(wif, network), undefined, sighashType)

      // Build the hex
      let builtHex
      try {
        builtHex = txb.build().toHex()
      } catch (err) {
        throw new Error(`Unable to build Transaction Hex!: ${err}`)
      }

      expect(builtHex).toBe('020000000175336521eafc16db3756792832d89745d779159295a976aede9bd0294f265bd9010000006a4730440220311c81ae6043b36d65fbc7cf3ffdc48b2902c06d9bfa7fe03e8ce9c57807ea970220074039742156447caa5c871fc3df998acece234e3907b9c62e2b3b068117838381210235dbc5de310bde64bf53276d93f5347d55bd5b1f64c4885039b5bfd8afe2dfa7ffffffff01c09ee605000000001976a914b7d946f6088b9d05b5249e8503f9d202bfffc01588ac00000000fd
    })
  })
})
